//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ThornWriter {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ThornWriter.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // CodeMirror, copyright (c) by Marijn Haverbeke and others
        ///// Distributed under an MIT license: https://codemirror.net/LICENSE
        ///
        ///(function(mod) {
        ///  if (typeof exports == &quot;object&quot; &amp;&amp; typeof module == &quot;object&quot;) // CommonJS
        ///    mod(require(&quot;../../lib/codemirror&quot;));
        ///  else if (typeof define == &quot;function&quot; &amp;&amp; define.amd) // AMD
        ///    define([&quot;../../lib/codemirror&quot;], mod);
        ///  else // Plain browser env
        ///    mod(CodeMirror);
        ///})(function(CodeMirror) {
        ///&quot;use strict&quot;;
        ///
        ///CodeMirror.defineMode(&quot;css&quot;, function(conf [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CodeMirrorModeCss {
            get {
                return ResourceManager.GetString("CodeMirrorModeCss", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // CodeMirror, copyright (c) by Marijn Haverbeke and others
        ///// Distributed under an MIT license: https://codemirror.net/LICENSE
        ///
        ///(function(mod) {
        ///  if (typeof exports == &quot;object&quot; &amp;&amp; typeof module == &quot;object&quot;) // CommonJS
        ///    mod(require(&quot;../../lib/codemirror&quot;), require(&quot;../xml/xml&quot;), require(&quot;../javascript/javascript&quot;), require(&quot;../css/css&quot;));
        ///  else if (typeof define == &quot;function&quot; &amp;&amp; define.amd) // AMD
        ///    define([&quot;../../lib/codemirror&quot;, &quot;../xml/xml&quot;, &quot;../javascript/javascript&quot;, &quot;../css/css&quot;], mod); [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CodeMirrorModeHtmlMixed {
            get {
                return ResourceManager.GetString("CodeMirrorModeHtmlMixed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // CodeMirror, copyright (c) by Marijn Haverbeke and others
        ///// Distributed under an MIT license: https://codemirror.net/LICENSE
        ///
        ///(function(mod) {
        ///  if (typeof exports == &quot;object&quot; &amp;&amp; typeof module == &quot;object&quot;) // CommonJS
        ///    mod(require(&quot;../../lib/codemirror&quot;));
        ///  else if (typeof define == &quot;function&quot; &amp;&amp; define.amd) // AMD
        ///    define([&quot;../../lib/codemirror&quot;], mod);
        ///  else // Plain browser env
        ///    mod(CodeMirror);
        ///})(function(CodeMirror) {
        ///&quot;use strict&quot;;
        ///
        ///CodeMirror.defineMode(&quot;javascript&quot;, functi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CodeMirrorModeJs {
            get {
                return ResourceManager.GetString("CodeMirrorModeJs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // CodeMirror, copyright (c) by Marijn Haverbeke and others
        ///// Distributed under an MIT license: https://codemirror.net/LICENSE
        ///
        ///(function(mod) {
        ///  if (typeof exports == &quot;object&quot; &amp;&amp; typeof module == &quot;object&quot;) // CommonJS
        ///    mod(require(&quot;../../lib/codemirror&quot;));
        ///  else if (typeof define == &quot;function&quot; &amp;&amp; define.amd) // AMD
        ///    define([&quot;../../lib/codemirror&quot;], mod);
        ///  else // Plain browser env
        ///    mod(CodeMirror);
        ///})(function(CodeMirror) {
        ///&quot;use strict&quot;;
        ///
        ///var htmlConfig = {
        ///  autoSelfClosers: {&apos;a [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CodeMirrorModeXml {
            get {
                return ResourceManager.GetString("CodeMirrorModeXml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // CodeMirror, copyright (c) by Marijn Haverbeke and others
        ///// Distributed under an MIT license: https://codemirror.net/LICENSE
        ///
        ///// This is CodeMirror (https://codemirror.net), a code editor
        ///// implemented in JavaScript on top of the browser&apos;s DOM.
        /////
        ///// You can find some technical background for some of the code below
        ///// at http://marijnhaverbeke.nl/blog/#cm-internals .
        ///
        ///(function (global, factory) {
        ///  typeof exports === &apos;object&apos; &amp;&amp; typeof module !== &apos;undefined&apos; ? module.exports = factory() :
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CodeMirrorScript {
            get {
                return ResourceManager.GetString("CodeMirrorScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* BASICS */
        ///
        ///.CodeMirror {
        ///  /* Set height, width, borders, and global font properties here */
        ///  font-family: monospace;
        ///  height: 300px;
        ///  color: black;
        ///  direction: ltr;
        ///}
        ///
        ////* PADDING */
        ///
        ///.CodeMirror-lines {
        ///  padding: 4px 0; /* Vertical padding around content */
        ///}
        ///.CodeMirror pre.CodeMirror-line,
        ///.CodeMirror pre.CodeMirror-line-like {
        ///  padding: 0 4px; /* Horizontal padding of content */
        ///}
        ///
        ///.CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {
        ///  background-color: white; /* The l [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CodeMirrorStyle {
            get {
                return ResourceManager.GetString("CodeMirrorStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* Based on https://github.com/dempfi/ayu */
        ///
        ///.cm-s-ayu-mirage.CodeMirror { background: #1f2430; color: #cbccc6; }
        ///.cm-s-ayu-mirage div.CodeMirror-selected { background: #34455a; }
        ///.cm-s-ayu-mirage .CodeMirror-line::selection, .cm-s-ayu-mirage .CodeMirror-line &gt; span::selection, .cm-s-ayu-mirage .CodeMirror-line &gt; span &gt; span::selection { background: #34455a; }
        ///.cm-s-ayu-mirage .CodeMirror-line::-moz-selection, .cm-s-ayu-mirage .CodeMirror-line &gt; span::-moz-selection, .cm-s-ayu-mirage .CodeMirror-line  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CodeMirrorThemeAyuMirage {
            get {
                return ResourceManager.GetString("CodeMirrorThemeAyuMirage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        ///
        ///    Name:       Base16 Default Dark
        ///    Author:     Chris Kempson (http://chriskempson.com)
        ///
        ///    CodeMirror template by Jan T. Sott (https://github.com/idleberg/base16-codemirror)
        ///    Original Base16 color scheme by Chris Kempson (https://github.com/chriskempson/base16)
        ///
        ///*/
        ///
        ///.cm-s-base16-dark.CodeMirror { background: #151515; color: #e0e0e0; }
        ///.cm-s-base16-dark div.CodeMirror-selected { background: #303030; }
        ///.cm-s-base16-dark .CodeMirror-line::selection, .cm-s-base16-dark .CodeMirror-line &gt; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CodeMirrorThemeBase16Dark {
            get {
                return ResourceManager.GetString("CodeMirrorThemeBase16Dark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .cm-s-ttcn .cm-quote { color: #090; }
        ///.cm-s-ttcn .cm-negative { color: #d44; }
        ///.cm-s-ttcn .cm-positive { color: #292; }
        ///.cm-s-ttcn .cm-header, .cm-strong { font-weight: bold; }
        ///.cm-s-ttcn .cm-em { font-style: italic; }
        ///.cm-s-ttcn .cm-link { text-decoration: underline; }
        ///.cm-s-ttcn .cm-strikethrough { text-decoration: line-through; }
        ///.cm-s-ttcn .cm-header { color: #00f; font-weight: bold; }
        ///
        ///.cm-s-ttcn .cm-atom { color: #219; }
        ///.cm-s-ttcn .cm-attribute { color: #00c; }
        ///.cm-s-ttcn .cm-bracket { col [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CodeMirrorThemeTtcn {
            get {
                return ResourceManager.GetString("CodeMirrorThemeTtcn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///&lt;html&gt;
        ///&lt;head&gt;
        ///    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;
        ///    
        ///    {DocumentStyle}
        ///    &lt;script&gt;
        ///        window.onerror = function (msg, url, linenumber) {
        ///            alert(&apos;Error message: &apos; + msg + &apos;\nURL: &apos; + url + &apos;\nLine Number: &apos; + linenumber);
        ///            return true;
        ///        }
        ///    &lt;/script&gt;
        ///&lt;/head&gt;
        ///&lt;body&gt;
        ///    {Content}
        ///&lt;/body&gt;
        ///&lt;/html&gt; .
        /// </summary>
        internal static string DocumentBase {
            get {
                return ResourceManager.GetString("DocumentBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to * {
        ///    box-sizing: border-box !important;
        ///}
        ///
        ///body {
        ///    font-family: Arial, sans-serif;
        ///}
        ///
        ///h1, h2, h3, h4, h5, h6 {
        ///    margin: 0.25rem 0;
        ///}
        ///
        ///.hidden {
        ///    display: none !important;
        ///}
        ///
        ///.inline {
        ///    display: inline !important;
        ///}
        ///
        ///.bold {
        ///    font-weight: bold;
        ///}
        ///
        ///.italic {
        ///    font-style: italic;
        ///}.
        /// </summary>
        internal static string DocumentStyle {
            get {
                return ResourceManager.GetString("DocumentStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///&lt;html&gt;
        ///&lt;head&gt;
        ///    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;
        ///    {CodeMirrorStyle}
        ///    {CodeMirrorScript}
        ///
        ///    {CodeMirrorModeCss}
        ///    {CodeMirrorModeXml}
        ///    {CodeMirrorModeJs}
        ///    {CodeMirrorModeHtmlMixed}
        ///
        ///    {CodeMirrorTheme}
        ///&lt;/head&gt;
        ///&lt;body&gt;
        ///    &lt;textarea id=&quot;textEdit&quot;&gt;&lt;/textarea&gt;
        ///
        ///    {TextEditStyle}
        ///    {TextEditScript}
        ///&lt;/body&gt;
        ///&lt;/html&gt; .
        /// </summary>
        internal static string TextEdit {
            get {
                return ResourceManager.GetString("TextEdit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function loadEditor(teaxAreaId) {
        ///    var textArea = document.getElementById(teaxAreaId);
        ///
        ///    var instance = CodeMirror.fromTextArea(textArea, {
        ///        mode: &quot;htmlmixed&quot;,
        ///        theme: &quot;ttcn&quot;,
        ///        lineNumbers: true,
        ///        gutter: true
        ///    });
        ///
        ///    instance.setSize(&quot;100%&quot;, &quot;100%&quot;);
        ///
        ///    return instance;
        ///}
        ///
        ///var codeMirrorInstance = loadEditor(&quot;textEdit&quot;);
        ///
        ///function setEditorTheme(themeName) {
        ///    
        ///}
        ///
        ///function setEditorContent(content) {
        ///    codeMirrorInstance.setValue(content);
        ///}
        ///
        ///function [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TextEditScript {
            get {
                return ResourceManager.GetString("TextEditScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to * {
        ///    box-sizing: border-box !important;
        ///}
        ///
        ///textarea {
        ///    display: block;
        ///    margin: 0 !important;
        ///    width: 100vw;
        ///    height: 100vh;
        ///    left: 0px;
        ///    top: 0px;
        ///    bottom: 0;
        ///    right: 0;
        ///    position: fixed;
        ///    border: 0px solid transparent;
        ///}
        ///
        ///body {
        ///    background: white !important;
        ///    margin: 0 !important;
        ///    padding: 0 !important;
        ///    display: block;
        ///    height: 100vh;
        ///    width: 100vw;
        ///}
        ///.
        /// </summary>
        internal static string TextEditStyle {
            get {
                return ResourceManager.GetString("TextEditStyle", resourceCulture);
            }
        }
    }
}
